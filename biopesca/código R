# Biopesca março a outubro de 2023 ####
rm()
setwd("C:/Users/lg_ri/Dropbox/Postdoc/UNIOESTE/Relatórios Itaipu/R")
library(readxl)
library(vegan)
library(tidyr)
library(dplyr)
library(ggplot2)
BioAnual23 <- data.frame(read_xlsx("BiopescaAnual23.xlsx", sheet="Biopesca"))
Ord <- levels(factor(BioAnual23$Ordem))
Fam <- levels(factor(BioAnual23$Familia))
Spp <- levels(factor(BioAnual23$Genero))
Comp <- levels(factor(interaction(BioAnual23$Ordem,
                                  BioAnual23$Familia,
                                  BioAnual23$Genero)))
Comp # Lista de espécie
BioAnual23$Mes <- format(BioAnual23$Data, "%b %Y") # Data em (mmm aaaa)
BioAnual23$Mes <- factor(BioAnual23$Mes)
BioAnual23$Seq <- seq(nrow(BioAnual23))

### VALORES
Preco<-BioAnual23[BioAnual23$Preço>0,]
Preco<-Preco[-which(is.na(Preco$Preço)),c("Zona","Genero","Preço")]
Preco
tapply(Preco$Preço,interaction(Preco$Zona,Preco$Genero), mean)
names(BioAnual23)

### DADOS GERAIS
nSpp <- aggregate(Seq ~ Genero, data=BioAnual23, length)
#nPescador <- sum(nPescadorZona)
#Geral <- nSpp$Seq/nPescador
unique(BioAnual23$Ponto)

# Esforço em número de pescadores
nPescadorZonaMes <- aggregate(Seq ~ Pescador+Mes+Zona, data=BioAnual23, length)
nPescadorZonaMes1 <- aggregate(Seq ~ Mes+Zona, data=nPescadorZonaMes, length)
nPescadorZonaMes1Tab <- as.data.frame.matrix(t(xtabs(Seq ~., data=nPescadorZonaMes1)))
nPescadorMes1 <- aggregate(Seq ~ Mes, data=nPescadorZonaMes, length)
PescadoresMes <- rbind(nPescadorZonaMes1Tab,nPescadorMes1$Seq)
rownames(PescadoresMes)[4]<- "Geral"

##############
PescadoresMes # DADOS PARA FIGURA DO ESFORÇO
##############

column_order <- c("mar 2023", "abr 2023", "mai 2023", "jun 2023", "jul 2023","ago 2023","set 2023","out 2023")

# Reorganize columns based on the list
PescadoresMes <- PescadoresMes %>%
  select(column_order)

names(PescadoresMes) <- c("Mar 2023", "Abr 2023", "Mai 2023", "Jun 2023", "Jul 2023", "Ago 2023", "Set 2023", "Out 2023")

lines_order <- c(4,1,3,2)

# Reorganize lines based on the list
PescadoresMes <- PescadoresMes %>%
  slice(lines_order)

line_color<-c("#000000","#045e9a", "#da2420", "#009241")

# Convert row names to a column
PescadoresMes$Zona <- rownames(PescadoresMes)
PescadoresMes1 <- PescadoresMes[, c("Zona", names(PescadoresMes)[-ncol(PescadoresMes)])]  # Move "Zona" column to the front

# Convert data to long format
PescadoresMes_long <- tidyr::pivot_longer(PescadoresMes1, cols = -Zona, names_to = "Month", values_to = "Value")

# Extract month and year from "Month" column
PescadoresMes_long$Month <- sub(" .*", "", PescadoresMes_long$Month)

# Ensure "Zona" is a factor with the desired order
PescadoresMes_long$Zona <- factor(PescadoresMes_long$Zona, levels = unique(PescadoresMes_long$Zona))

PescadoresMes_long$Month <- factor(PescadoresMes_long$Month, levels = unique(PescadoresMes_long$Month))

# 1. Data for each three regions (as lines)
ggplot(PescadoresMes_long, aes(x = Month, y = Value, color = Zona, group = Zona)) +
  geom_line(aes(color = Zona), linewidth = 1) +
  scale_color_manual(values = line_color) +  # Change line color
  labs(title = "",
       x = "Mês",
       y = "Número de pescadores") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove major gridlines for x-axis
    panel.grid.minor.x = element_blank(),  # Remove minor gridlines for x-axis
    #panel.grid.major.y = element_blank(),
    panel.grid.major.y = element_line(color = "gray", size = 0.1),  # Keep major gridlines for y-axis
    panel.grid.minor.y = element_blank(),  # Remove minor gridlines for y-axis
    axis.line.x = element_line(color = "black", size = 1),  # X-axis line
    axis.line.y = element_line(color = "black", size = 1),  # Y-axis line
    axis.text.x = element_text(size = 20),  # Increase X-axis text size
    axis.text.y = element_text(size = 20),
    axis.title.x = element_text(size = 22),  # Increase X-axis label size
    axis.title.y = element_text(size = 22),  # Increase Y-axis label size
    legend.text = element_text(size = 20),   # Increase legend text size
    legend.title = element_text(size = 22),   # Increase legend title size
    legend.position = "right",  # Position of legend
    legend.justification = "bottom") +
  scale_y_continuous(breaks = seq(0, ceiling(max(PescadoresMes_long$Value)), by = 5), limits = c(1, 40))

# CPUE em Número ####
nZonaMes <- aggregate(N ~ Zona+Mes, data=BioAnual23, sum)
nZonaMesTab <- as.data.frame.matrix(xtabs(N~.,data=nZonaMes))
nMes <- aggregate(N ~ Mes, data=BioAnual23, sum)
nCPUEZonaMes <- nZonaMesTab/nPescadorZonaMes1Tab
nCPUEMes<-nMes$N/nPescadorMes1$Seq
CPUE_Numero_Mensal <- rbind(nCPUEZonaMes,nCPUEMes)
rownames(CPUE_Numero_Mensal)[4] <- "Geral"

####################
CPUE_Numero_Mensal # DADOS P/ FIGURA (número de peixes por pescador por mês)
####################

# Reorganize columns based on the list
CPUE_Numero_Mensal <- CPUE_Numero_Mensal %>%
  select(column_order)

names(CPUE_Numero_Mensal) <- c("Mar 2023", "Abr 2023", "Mai 2023", "Jun 2023", "Jul 2023", "Ago 2023", "Set 2023", "Out 2023")

# Reorganize lines based on the list
CPUE_Numero_Mensal <- CPUE_Numero_Mensal %>%
  slice(lines_order)

# Convert row names to a column
CPUE_Numero_Mensal$Zona <- rownames(CPUE_Numero_Mensal)
CPUE_Numero_Mensal <- CPUE_Numero_Mensal[, c("Zona", names(CPUE_Numero_Mensal)[-ncol(CPUE_Numero_Mensal)])]  # Move "Zona" column to the front

# Convert data to long format
CPUE_Numero_Mensal_long <- tidyr::pivot_longer(CPUE_Numero_Mensal, cols = -Zona, names_to = "Month", values_to = "Value")

# Extract month and year from "Month" column
CPUE_Numero_Mensal_long$Month <- sub(" .*", "", CPUE_Numero_Mensal_long$Month)

# Ensure "Zona" is a factor with the desired order
CPUE_Numero_Mensal_long$Zona <- factor(CPUE_Numero_Mensal_long$Zona, levels = unique(CPUE_Numero_Mensal_long$Zona))

CPUE_Numero_Mensal_long$Month <- factor(CPUE_Numero_Mensal_long$Month, levels = unique(CPUE_Numero_Mensal_long$Month))

# 1. Data for each three regions (as lines)
ggplot(CPUE_Numero_Mensal_long, aes(x = Month, y = Value, color = Zona, group = Zona)) +
  geom_line(aes(color = Zona),linewidth = 1) +
  scale_color_manual(values = line_color) +  # Change line color
  labs(title = "",
       x = "Mês",
       y = "CPUE: número de peixes por pescador") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove major gridlines for x-axis
    panel.grid.minor.x = element_blank(),  # Remove minor gridlines for x-axis
    #panel.grid.major.y = element_blank(),
    panel.grid.major.y = element_line(color = "gray", size = 0.1),  # Keep major gridlines for y-axis
    panel.grid.minor.y = element_blank(),  # Remove minor gridlines for y-axis
    axis.line.x = element_line(color = "black", size = 1),  # X-axis line
    axis.line.y = element_line(color = "black", size = 1),  # Y-axis line
    axis.text.x = element_text(size = 20),  # Increase X-axis text size
    axis.text.y = element_text(size = 20),
    axis.title.x = element_text(size = 22),  # Increase X-axis label size
    axis.title.y = element_text(size = 22),  # Increase Y-axis label size
    legend.text = element_text(size = 20),   # Increase legend text size
    legend.title = element_text(size = 22),   # Increase legend title size
    legend.position = "right",  # Position of legend
    legend.justification = "bottom") +
  scale_y_continuous(breaks = seq(0, ceiling(max(CPUE_Numero_Mensal_long$Value)), by = 5), limits = c(0, 60))

# CPUE Biomassa ####
bZonaMes <- aggregate(Peso.total..g. ~ Zona+Mes, data=BioAnual23, sum, na.rm=TRUE)
bZonaMesTab <- as.data.frame.matrix(xtabs(Peso.total..g.~.,data=bZonaMes))
bMes <- aggregate(Peso.total..g. ~ Mes, data=BioAnual23, sum)
bCPUEZonaMes <- bZonaMesTab/nPescadorZonaMes1Tab
bCPUEMes<-bMes$Peso.total..g./nPescadorMes1$Seq
CPUE_Biomassa_Mensal <- rbind(bCPUEZonaMes,bCPUEMes)
rownames(CPUE_Biomassa_Mensal)[4] <- "Geral"

####################
CPUE_Biomassa_Mensal # DADOS P/ FIGURA (g de peixes por pescador por mês)
####################

# Reorganize columns based on the list
CPUE_Biomassa_Mensal <- CPUE_Biomassa_Mensal %>%
  select(column_order)

names(CPUE_Biomassa_Mensal) <- c("Mar 2023", "Abr 2023", "Mai 2023", "Jun 2023", "Jul 2023", "Ago 2023", "Set 2023", "Out 2023")

# Reorganize lines based on the list
CPUE_Biomassa_Mensal <- CPUE_Biomassa_Mensal %>%
  slice(lines_order)

# Convert row names to a column
CPUE_Biomassa_Mensal$Zona <- rownames(CPUE_Biomassa_Mensal)
CPUE_Biomassa_Mensal <- CPUE_Biomassa_Mensal[, c("Zona", names(CPUE_Biomassa_Mensal)[-ncol(CPUE_Biomassa_Mensal)])]  # Move "Zona" column to the front

# Convert data to long format
CPUE_Biomassa_Mensal_long <- tidyr::pivot_longer(CPUE_Biomassa_Mensal, cols = -Zona, names_to = "Month", values_to = "Value")

# Extract month and year from "Month" column
CPUE_Biomassa_Mensal_long$Month <- sub(" .*", "", CPUE_Biomassa_Mensal_long$Month)

# Ensure "Zona" is a factor with the desired order
CPUE_Biomassa_Mensal_long$Zona <- factor(CPUE_Biomassa_Mensal_long$Zona, levels = unique(CPUE_Biomassa_Mensal_long$Zona))

CPUE_Biomassa_Mensal_long$Month <- factor(CPUE_Biomassa_Mensal_long$Month, levels = unique(CPUE_Biomassa_Mensal_long$Month))

# 1. Data for each three regions (as lines)
ggplot(CPUE_Biomassa_Mensal_long, aes(x = Month, y = Value, color = Zona, group = Zona)) +
  geom_line(aes(color = Zona),linewidth = 1) +
  scale_color_manual(values = line_color) +  # Change line color
  labs(title = "",
       x = "Mês",
       y = "CPUE: biomassa de peixes (g) por pescador") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove major gridlines for x-axis
    panel.grid.minor.x = element_blank(),  # Remove minor gridlines for x-axis
    #panel.grid.major.y = element_blank(),
    panel.grid.major.y = element_line(color = "gray", size = 0.1),  # Keep major gridlines for y-axis
    panel.grid.minor.y = element_blank(),  # Remove minor gridlines for y-axis
    axis.line.x = element_line(color = "black", size = 1),  # X-axis line
    axis.line.y = element_line(color = "black", size = 1),  # Y-axis line
    axis.text.x = element_text(size = 20),  # Increase X-axis text size
    axis.text.y = element_text(size = 20),
    axis.title.x = element_text(size = 22),  # Increase X-axis label size
    axis.title.y = element_text(size = 22),  # Increase Y-axis label size
    legend.text = element_text(size = 20),   # Increase legend text size
    legend.title = element_text(size = 22),   # Increase legend title size
    legend.position = "right",  # Position of legend
    legend.justification = "bottom") +  # Justification of legend
  #ylim(0, max(PescadoresMes_long$Value) + 1)
  scale_y_continuous(breaks = seq(0, ceiling(max(CPUE_Biomassa_Mensal_long$Value)), by = 3000), limits = c(0, 29000))

# Riqueza e Diversidade #####
Shannon <- matrix(NA, nrow=4, ncol=8)
Riqueza <- matrix(NA, nrow=4, ncol=8)
for(i in 1:8){
  Dados <- BioAnual23[BioAnual23$Mes==levels(BioAnual23$Mes)[i],] #subconjunto mensal
  nZona <- tapply(Dados$N, list(Dados$Zona,Dados$Genero), sum,default = 0)
  Geral <- colSums(nZona)
  n <- rbind(nZona,Geral)
  cpueZonaSpp <- n/PescadoresMes[,i]
  Shannon[,i] <- diversity(cpueZonaSpp, index="shannon")
  Riqueza[,i] <- specnumber(cpueZonaSpp)
}
J <- Shannon/log(Riqueza) # Pielou's evenness (J)
row.names(Shannon)<-row.names(n)
colnames(Shannon) <- levels(BioAnual23$Mes)
row.names(Riqueza)<-row.names(n)
colnames(Riqueza) <- levels(BioAnual23$Mes)
row.names(J)<-row.names(n)
colnames(J) <- levels(BioAnual23$Mes)

#########
Shannon   #
Riqueza   # DADOS PARA FIGURA DOS ATRIBUTOS
J         #
##########

Shannon<-as.data.frame(Shannon)
Riqueza<-as.data.frame(Riqueza)
J<-as.data.frame(J)

# Reorganize columns based on the list
Shannon <- Shannon %>%
  select(column_order)

names(Shannon) <- c("Mar 2023", "Abr 2023", "Mai 2023", "Jun 2023", "Jul 2023", "Ago 2023", "Set 2023", "Out 2023")

# Reorganize lines based on the list
Shannon <- Shannon %>%
  slice(lines_order)

# Convert row names to a column
Shannon$Zona <- rownames(Shannon)
Shannon <- Shannon[, c("Zona", names(Shannon)[-ncol(Shannon)])]  # Move "Zona" column to the front

# Convert data to long format
Shannon_long <- tidyr::pivot_longer(Shannon, cols = -Zona, names_to = "Month", values_to = "Value")

# Extract month and year from "Month" column
Shannon_long$Month <- sub(" .*", "", Shannon_long$Month)

# Ensure "Zona" is a factor with the desired order
Shannon_long$Zona <- factor(Shannon_long$Zona, levels = unique(Shannon_long$Zona))

Shannon_long$Month <- factor(Shannon_long$Month, levels = unique(Shannon_long$Month))

# 1. Data for each three regions (as lines)
ggplot(Shannon_long, aes(x = Month, y = Value, color = Zona, group = Zona)) +
  geom_line(aes(color = Zona),linewidth = 1) +
  scale_color_manual(values = line_color) +  # Change line color
  labs(title = "",
       x = "Mês",
       y = "Índice de Shannon-Weaver") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove major gridlines for x-axis
    panel.grid.minor.x = element_blank(),  # Remove minor gridlines for x-axis
    #panel.grid.major.y = element_blank(),
    panel.grid.major.y = element_line(color = "gray", size = 0.1),  # Keep major gridlines for y-axis
    panel.grid.minor.y = element_blank(),  # Remove minor gridlines for y-axis
    axis.line.x = element_line(color = "black", size = 1),  # X-axis line
    axis.line.y = element_line(color = "black", size = 1),  # Y-axis line
    axis.text.x = element_text(size = 20),  # Increase X-axis text size
    axis.text.y = element_text(size = 20),
    axis.title.x = element_text(size = 22),  # Increase X-axis label size
    axis.title.y = element_text(size = 22),  # Increase Y-axis label size
    legend.text = element_text(size = 20),   # Increase legend text size
    legend.title = element_text(size = 22),   # Increase legend title size
    legend.position = "right",  # Position of legend
    legend.justification = "bottom") +  # Justification of legend
  #ylim(0, max(PescadoresMes_long$Value) + 1)
  scale_y_continuous(breaks = seq(0, ceiling(max(Shannon_long$Value)), by = 0.5), limits = c(0, 3))

# Reorganize columns based on the list
Riqueza <- Riqueza %>%
  select(column_order)

names(Riqueza) <- c("Mar 2023", "Abr 2023", "Mai 2023", "Jun 2023", "Jul 2023", "Ago 2023", "Set 2023", "Out 2023")

# Reorganize lines based on the list
Riqueza <- Riqueza %>%
  slice(lines_order)

# Convert row names to a column
Riqueza$Zona <- rownames(Riqueza)
Riqueza <- Riqueza[, c("Zona", names(Riqueza)[-ncol(Riqueza)])]  # Move "Zona" column to the front

# Convert data to long format
Riqueza_long <- tidyr::pivot_longer(Riqueza, cols = -Zona, names_to = "Month", values_to = "Value")

# Extract month and year from "Month" column
Riqueza_long$Month <- sub(" .*", "", Riqueza_long$Month)

# Ensure "Zona" is a factor with the desired order
Riqueza_long$Zona <- factor(Riqueza_long$Zona, levels = unique(Riqueza_long$Zona))

Riqueza_long$Month <- factor(Riqueza_long$Month, levels = unique(Riqueza_long$Month))

# 1. Data for each three regions (as lines)
ggplot(Riqueza_long, aes(x = Month, y = Value, color = Zona, group = Zona)) +
  geom_line(aes(color = Zona),linewidth = 1) +
  scale_color_manual(values = line_color) +  # Change line color
  labs(title = "",
       x = "Mês",
       y = "Riqueza de espécies") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove major gridlines for x-axis
    panel.grid.minor.x = element_blank(),  # Remove minor gridlines for x-axis
    #panel.grid.major.y = element_blank(),
    panel.grid.major.y = element_line(color = "gray", size = 0.1),  # Keep major gridlines for y-axis
    panel.grid.minor.y = element_blank(),  # Remove minor gridlines for y-axis
    axis.line.x = element_line(color = "black", size = 1),  # X-axis line
    axis.line.y = element_line(color = "black", size = 1),  # Y-axis line
    axis.text.x = element_text(size = 20),  # Increase X-axis text size
    axis.text.y = element_text(size = 20),
    axis.title.x = element_text(size = 22),  # Increase X-axis label size
    axis.title.y = element_text(size = 22),  # Increase Y-axis label size
    legend.text = element_text(size = 20),   # Increase legend text size
    legend.title = element_text(size = 22),   # Increase legend title size
    legend.position = "right",  # Position of legend
    legend.justification = "bottom") +  # Justification of legend
  #ylim(0, max(PescadoresMes_long$Value) + 1)
  scale_y_continuous(breaks = seq(0, ceiling(max(Riqueza_long$Value)), by = 5), limits = c(0, 45))

# Reorganize columns based on the list
J <- J %>%
  select(column_order)

names(J) <- c("Mar 2023", "Abr 2023", "Mai 2023", "Jun 2023", "Jul 2023", "Ago 2023", "Set 2023", "Out 2023")

# Reorganize lines based on the list
J <- J %>%
  slice(lines_order)

# Convert row names to a column
J$Zona <- rownames(J)
J <- J[, c("Zona", names(J)[-ncol(J)])]  # Move "Zona" column to the front

# Convert data to long format
J_long <- tidyr::pivot_longer(J, cols = -Zona, names_to = "Month", values_to = "Value")

# Extract month and year from "Month" column
J_long$Month <- sub(" .*", "", J_long$Month)

# Ensure "Zona" is a factor with the desired order
J_long$Zona <- factor(J_long$Zona, levels = unique(J_long$Zona))

J_long$Month <- factor(J_long$Month, levels = unique(J_long$Month))

# 1. Data for each three regions (as lines)
ggplot(J_long, aes(x = Month, y = Value, color = Zona, group = Zona)) +
  geom_line(aes(color = Zona),linewidth = 1) +
  scale_color_manual(values = line_color) +  # Change line color
  labs(title = "",
       x = "Mês",
       y = "Índice de Equitabilidade de Pielou (J)") +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),  # Remove major gridlines for x-axis
    panel.grid.minor.x = element_blank(),  # Remove minor gridlines for x-axis
    #panel.grid.major.y = element_blank(),
    panel.grid.major.y = element_line(color = "gray", size = 0.1),  # Keep major gridlines for y-axis
    panel.grid.minor.y = element_blank(),  # Remove minor gridlines for y-axis
    axis.line.x = element_line(color = "black", size = 1),  # X-axis line
    axis.line.y = element_line(color = "black", size = 1),  # Y-axis line
    axis.text.x = element_text(size = 20),  # Increase X-axis text size
    axis.text.y = element_text(size = 20),
    axis.title.x = element_text(size = 22),  # Increase X-axis label size
    axis.title.y = element_text(size = 22),  # Increase Y-axis label size
    legend.text = element_text(size = 20),   # Increase legend text size
    legend.title = element_text(size = 22),   # Increase legend title size
    legend.position = "right",  # Position of legend
    legend.justification = "bottom") +  # Justification of legend
  #ylim(0, max(PescadoresMes_long$Value) + 1)
  scale_y_continuous(breaks = seq(0, ceiling(max(J_long$Value)), by = 0.2), limits = c(0, 1.1))

#whitaker plot
### whitaker data for each region
Whitakerplot_zone_data <- BioAnual23 %>%
  group_by(Zona, Espécie) %>%
  summarise(Count = n())

# Pivot the data to wide format
Whitakerplot_zone_data_wide <- Whitakerplot_zone_data %>%
  pivot_wider(names_from = Zona, values_from = Count, values_fill = 0)

Whitakerplot_zone_data_wide<-as.data.frame(Whitakerplot_zone_data_wide)

### whitaker data for all regions
Whitakerplot_all_data <- BioAnual23 %>%
  group_by(Espécie) %>%
  summarise(Count = n())

nPescadorZona <- aggregate(Seq ~ Pescador+Zona+Espécie, data=BioAnual23, length)
nPescadorZona1 <- aggregate(Seq ~ Zona+Espécie, data=nPescadorZona, length)
nPescadorZona1Tab <- as.data.frame.matrix(t(xtabs(Seq ~., data=nPescadorZona1)))

nPescadorSpp <- aggregate(Seq ~ Pescador+Espécie, data=BioAnual23, length)
nPescadorSpp1 <- aggregate(Seq ~ Pescador+Espécie, data=nPescadorSpp, length)
nPescadorSpp1Tab <- as.data.frame.matrix(t(xtabs(Seq ~., data=nPescadorSpp1)))

# CPUE em Número ####
nZona <- aggregate(N ~ Zona+Espécie, data=BioAnual23, sum)
nZonaTab <- as.data.frame.matrix(xtabs(N~.,data=nZona))
nspp <- aggregate(N ~ Espécie, data=BioAnual23, sum)
tnZonaTab<-t(nZonaTab)
nCPUEZona <- tnZonaTab/nPescadorZona1Tab
nPescadorZonaSpp <- aggregate(Seq ~ Pescador+Espécie+Zona, data=BioAnual23, length)
nPescadorSpp <- aggregate(Seq ~ Espécie, data=nPescadorZonaSpp, length)
nCPUEspp<-nspp$N/nPescadorSpp$Seq
CPUE_spp <- cbind(nCPUEZona,nCPUEspp)
colnames(CPUE_spp)[4] <- "Geral"
# Convert row names to an actual column
CPUE_spp$Species <- rownames(CPUE_spp)
# Remove row names
rownames(CPUE_spp) <- NULL

CPUE_fluvial <- CPUE_spp %>%
  arrange(desc(Fluvial))

CPUE_lacustre <- CPUE_spp %>%
  arrange(desc(Lacustre))

CPUE_transicao <- CPUE_spp %>%
  arrange(desc(Transição))

CPUE_geral <- CPUE_spp %>%
  arrange(desc(Geral))

# Function to create Whitaker plot with vertical bars and rotated plot
create_whitaker_plot <- function(data, place) {
  # Subset data to top 10 species
  top_10_data <- head(data[order(-data[[place]]), ], 10)
  
  # Calculate Whitaker plot coordinates
  top_10_data$Whitaker <- log(top_10_data[[place]])
  
  # Reorder Species based on Whitaker values
  top_10_data$Species <- factor(top_10_data$Species, levels = top_10_data$Species[order(top_10_data$Whitaker)])
  
  # Define color palette for each area
  # area_colors <- c("Fluvial" = "#045e9a",
  #                 "Transição" = "#da2420",
  #                "Lacustre" = "#009241",
  #               "Geral" = "#000000")
  
  generate_gradient <- function(place) {
    if (place == "Fluvial") {
      return(c("lightblue", "darkblue"))
    } else if (place == "Transição") {
      return(c("orange", "darkred"))
    } else if (place == "Lacustre") {
      return(c("lightgreen", "darkgreen"))
    } else if (place == "Geral") {
      return(c("lightgrey", "black"))
    } else {
      return(c("lightblue", "darkblue"))  # Default gradient
    }
  }
  
  # Plot
  ggplot(top_10_data, aes(x = Species, y = Whitaker, fill = Whitaker)) +
    geom_bar(stat = "identity") +
    scale_fill_gradient(low = generate_gradient(place)[1], high = generate_gradient(place)[2]) +  # Adding custom color gradient
    #scale_color_gradient(high = "navy",low = alpha("navy", 0))+
    #scale_fill_manual(values = area_colors) +  # Assigning colors from the palette
    labs(x = "", y = "CPUE(log) - número de peixes por pescador", fill = "Species") +  # Remove legend title
    ggtitle(paste("", place)) +
    coord_flip() +
    theme_minimal() +
    theme(axis.text.x = element_text(angle = 0, vjust = 0.5, hjust=1, size = 14),
          axis.text.y = element_text(face = "italic", size = 14),
          panel.grid.major.x = element_blank(),  # Remove major gridlines for x-axis
          panel.grid.minor.x = element_blank(),  # Remove minor gridlines for x-axis
          panel.grid.major.y = element_blank(),  # Keep major gridlines for y-axis
          panel.grid.minor.y = element_blank(),  # Remove minor gridlines for y-axis
          axis.line.x = element_line(color = "black", size = 1),  # X-axis line
          axis.line.y = element_line(color = "black", size = 1),  # Y-axis line
          axis.title.x = element_text(size = 22),  # Increase X-axis label size
          axis.title.y = element_text(size = 22),  # Increase Y-axis label size
          legend.text = element_text(size = 20),   # Increase legend text size
          legend.title = element_text(size = 22),   # Increase legend title size
          legend.position = "none")  # Remove legend
}

# Create Whitaker plots for each place
whitaker_plot_fluvial <- create_whitaker_plot(CPUE_fluvial, "Fluvial")
whitaker_plot_lacustre <- create_whitaker_plot(CPUE_lacustre, "Lacustre")
whitaker_plot_transicao <- create_whitaker_plot(CPUE_transicao, "Transição")
whitaker_plot_geral <- create_whitaker_plot(CPUE_geral, "Geral")

# Print the Whitaker plots
print(whitaker_plot_geral)
print(whitaker_plot_fluvial)
print(whitaker_plot_transicao)
print(whitaker_plot_lacustre)


#composição PCoA
# CPUE em Número por zona####
nPonto <- aggregate(N ~ Espécie+Ponto, data=BioAnual23, sum)
nPontoTab <- as.data.frame.matrix(xtabs(N~.,data=nPonto))
nspp <- aggregate(N ~ Espécie, data=BioAnual23, sum)
tnPontoTab<-t(nPontoTab)

# Esforço em número de pescadores
nPescadorPonto <- aggregate(Seq ~ Pescador+Ponto+Espécie, data=BioAnual23, length)
nPescadorPonto1 <- aggregate(Seq ~ Ponto+Espécie, data=nPescadorPonto, length)
nPescadorPonto1Tab <- as.data.frame.matrix(t(xtabs(Seq ~., data=nPescadorPonto1)))

tnPescadorPonto1Tab<-t(nPescadorPonto1Tab)

nCPUEPonto <- tnPontoTab/tnPescadorPonto1Tab

nCPUEPonto[is.nan(nCPUEPonto)] <- 0

rownames(nCPUEPonto) <- c("Lacustre 1","Lacustre 2","Lacustre 3","Lacustre 4","Lacustre 5","Lacustre 6","Lacustre 7",
                          "Lacustre 8","Lacustre 9","Lacustre 10","Lacustre 11","Lacustre 12","Lacustre 13",
                          "Lacustre 14","Transição 1","Transição 2","Lacustre 15","Transição 3","Fluvial 1",
                          "Lacustre 16","Fluvial 2","Fluvial 3","Transição 4","Fluvial 4")
nCPUEPonto <- nCPUEPonto[order(rownames(nCPUEPonto)), ]

# 1. Calculate Bray-Curtis dissimilarities
bray_curtis_dist <- vegdist(nCPUEPonto, method = "bray")

# 2. Apply Hellinger transformation
hellinger_transformed <- decostand(nCPUEPonto, "hellinger")

# 3. Perform PCoA using transformed data
library(vegan)
pcoa_result <- capscale(hellinger_transformed ~ 1, distance = "bray")

## First 16 sites grazed, remaining 8 sites ungrazed
groups <- factor(c(rep(1,4), rep(5,16), rep(21,4)), labels = c("Fluvial","Lacustre","Transição"))

#indval por zonas
library(labdsv)
indval_result <- indval(nCPUEPonto, groups)
summary(indval_result)

# 4. Analyze multivariate homogeneity of group dispersions
dispersions <- betadisper(bray_curtis_dist, groups)
permutest(dispersions)
# Plot betadisper results
labs <- paste("PCoA", 1:4, "(", 
              round(100*dispersions$eig / sum(dispersions$eig), 2), "%)")

plot(dispersions, cex=1.3, pch=15:17,
     main="CPUE de cada espécie nas zonas (PERMANOVA p = 0.129)", cex.lab=1.25,
     xlab=labs[1], ylab=labs[2],
     hull=FALSE, ellipse=TRUE, lwd=2)

# CPUE em Número por Mês####
nMes <- aggregate(N ~ Espécie+Data, data=BioAnual23, sum)
nMesTab <- as.data.frame.matrix(xtabs(N~.,data=nMes))
nspp <- aggregate(N ~ Espécie, data=BioAnual23, sum)
tnMesTab<-t(nMesTab)

# Esforço em número de pescadores
nPescadorMes <- aggregate(Seq ~ Pescador+Data+Espécie, data=BioAnual23, length)
nPescadorMes1 <- aggregate(Seq ~ Data+Espécie, data=nPescadorMes, length)
nPescadorMes1Tab <- as.data.frame.matrix(t(xtabs(Seq ~., data=nPescadorMes1)))

tnPescadorMes1Tab<-t(nPescadorMes1Tab)

nCPUEMes <- tnMesTab/tnPescadorMes1Tab

nCPUEMes[is.nan(nCPUEMes)] <- 0

rownames(nCPUEMes) <- c("Março 1","Março 2","Março 3","Março 4","Abril 1","Abril 2","Abril 3","Abril 4","Abril 5","Abril 6","Abril 7","Maio 1",
                        "Maio 2","Maio 3","Maio 4","Maio 5","Maio 6","Maio 7","Maio 8","Junho 1","Junho 2","Junho 3","Junho 4","Junho 5",
                        "Julho 1","Julho 2","Julho 3","Julho 4","Julho 5","Agosto 1","Agosto 2","Agosto 3","Agosto 4","Agosto 5","Agosto 6",
                        "Agosto 7","Setembro 1","Setembro 2","Setembro 3","Setembro 4","Setembro 5","Setembro 6","Outubro 1",
                        "Outubro 2","Outubro 3","Outubro 4","Outubro 5","Outubro 6","Outubro 7")
nCPUEMes[!is.finite(nCPUEMes)] <- 0
# 1. Calculate Bray-Curtis dissimilarities
bray_curtis_dist2 <- vegdist(nCPUEMes, method = "bray")

# 2. Apply Hellinger transformation
hellinger_transformed2 <- decostand(nCPUEMes, "hellinger")

# 3. Perform PCoA using transformed data
library(vegan)
pcoa_result <- capscale(hellinger_transformed2 ~ 1, distance = "bray")

## First 16 sites grazed, remaining 8 sites ungrazed
groups2 <- factor(c(rep(1,4), rep(5,7), rep(11,8), rep(20,5), rep(25,5), rep(30,7), rep(38,6), rep(45,7)), labels = c("Março","Abril","Maio","Junho","Julho","Agosto","Setembro","Outubro"))

# 4. Analyze multivariate homogeneity of group dispersions
dispersions2 <- betadisper(bray_curtis_dist2, groups2)
permutest(dispersions2)
# Plot betadisper results
labs <- paste("PCoA", 1:4, "(", 
              round(100*dispersions$eig / sum(dispersions$eig), 2), "%)")

plot(dispersions2, cex=1.3, pch=15:17,
     main="CPUE de cada espécie nos meses (PERMANOVA p = 0.109)", cex.lab=1.25,
     xlab=labs[1], ylab=labs[2],
     hull=FALSE, ellipse=TRUE, lwd=2)

#Parei aqui

# Distribuição de tamanho #####
min(BioAnual23$CP, na.rm=TRUE);max(BioAnual23$CP, na.rm=TRUE);mean(BioAnual23$CP, na.rm=TRUE)
#jpeg(filename = "Res4_Tamanhos.jpeg",
 #    width = 18, height = 13, units = "cm", pointsize = 12,
  #   quality = 100, res=300)
par(mfrow=c(4,1), mar=c(1,0,1,0), oma=c(4,6,1,0))
hist(BioAnual23$CP, main="", col = "white", xaxt="n")
range(BioAnual23$CP, na.rm=TRUE)
mean(BioAnual23$CP, na.rm=TRUE)
mtext("Geral", side=3, line=0, outer=F, cex=1.25)
abline(v=mean(BioAnual23$CP, na.rm=T), col="black",lty=1, lwd=3)
hist(BioAnual23$CP[BioAnual23$Zona=="Fluvial"], main="",col = "#045e9a", breaks=x$breaks, xaxt="n")
mtext("Fluvial", side=3, line=0, outer=F, cex=1.25)
abline(v=mean(BioAnual23$CP[BioAnual23$Zona=="Fluvial"], na.rm=T), col="black",lty=1, lwd=3)
hist(BioAnual23$CP[BioAnual23$Zona=="Transição"], main="",col = "#da2420", breaks=x$breaks, xaxt="n")
mtext("Transição", side=3, line=0, outer=F, cex=1.25)
abline(v=mean(BioAnual23$CP[BioAnual23$Zona=="Transição"], na.rm=T), col="black",lty=1, lwd=3)
hist(BioAnual23$CP[BioAnual23$Zona=="Lacustre"], main="",col = "#009241", xlab=, breaks=x$breaks)
abline(v=mean(BioAnual23$CP[BioAnual23$Zona=="Lacustre"], na.rm=T), col="black",lty=1, lwd=3)
mtext("Lacustre", side=3, line=0, outer=F, cex=1.25)
mtext("Comprimento Padrão (cm)", side=1, line=2, outer=T, cex=1.25)
mtext("Frequência (Número de indivíduos)", side=2, line=3, outer=T, cex=1.25)
dev.off()

# Peso Comprimento, max e min ####
TabParametros <- matrix(NA, nrow=length(Spp), ncol=6)
colnames(TabParametros) <- c("CP.min", "CP.max", "WT.min", "WT.max","a","b")
rownames(TabParametros) <- Spp
i=1
for(i in 1:length(Spp)){
  TabParametros[i,1:2] <- range(BioAnual23$CP[BioAnual23$Genero==Spp[i]], na.rm=TRUE)
  TabParametros[i,3:4] <- range(BioAnual23$Peso.total..g.[BioAnual23$Genero==Spp[i]], na.rm=TRUE)
  x <- BioAnual23$CP[BioAnual23$Genero==Spp[i]]
  y <- BioAnual23$Peso.total..g.[BioAnual23$Genero==Spp[i]]
  if(length(y)>20){
    WT_LT <- lm(log10(y)~log10(x))
    TabParametros[i,5] <- round(10^WT_LT$coefficients[1],4)
    TabParametros[i,6] <- round(WT_LT$coefficients[2],4)
  }
}
TabParametros
TabParametros[is.infinite(TabParametros)] <- NA
library(xlsx)
write.xlsx(TabParametros, file = "TabParametros.xlsx")

# Reprodução #####
repG <- table(BioAnual23$Estagio)[c(2,3,5,1,4)]
repF <- table(BioAnual23$Estagio[BioAnual23$Zona=="Fluvial"])[c(2,3,5,1,4)]
repT <- table(BioAnual23$Estagio[BioAnual23$Zona=="Transição"])[c(2,3,5,1,4)]
repL <- table(BioAnual23$Estagio[BioAnual23$Zona=="Lacustre"])[c(2,3,5,1,4)]
repMat<-t(as.matrix(rbind(repL,repT,repF,repG)))
colnames(repMat) <- c("Lacustre", "Transição", "Fluvial", "Geral")
round(decostand(repMat, method="total", MARGIN = 2)*100,2)
#jpeg(filename = "Res5_Reprod.jpeg",
 #    width = 18, height = 13, units = "cm", pointsize = 12,
  #   quality = 100, res=300)
par(mfrow=c(1,1), mar=c(4,6,1,1), oma=c(0,0,0,0))
x1<-barplot(repMat, beside=TRUE, horiz=T, yaxt="n", col=heat.colors(10)[c(3:7)])
mtext(side=2, line=2.5, at=colMeans(x1), text = colnames(repMat), cex=1.25,las=3)
mtext(side=2, line=4, text = "Estágios Reprodutivos", cex=1.25,las=3)
axis(side=2, at=x1, labels=rep(rownames(repMat),4), cex.axis=0.75,las=2)
mtext("Frequência (Número de indivíduos)", side=1, line=3, cex=1.25)
dev.off()

# Alimentação #####
aliG <- table(BioAnual23$GR)
aliF <- table(BioAnual23$GR[BioAnual23$Zona=="Fluvial"])
aliT <- table(BioAnual23$GR[BioAnual23$Zona=="Transição"])
aliL <- table(BioAnual23$GR[BioAnual23$Zona=="Lacustre"])
aliMat<-t(as.matrix(rbind(aliL,aliT,aliF,aliG)))
colnames(aliMat) <- c("Lacustre", "Transição", "Fluvial", "Geral")
round(decostand(aliMat, method="total", MARGIN = 2)*100,2)
#jpeg(filename = "Res6_Aliment.jpeg",
 #    width = 18, height = 13, units = "cm", pointsize = 12,
  #   quality = 100, res=300)
par(mfrow=c(1,1), mar=c(4,6,1,1), oma=c(0,0,0,0))
x1<-barplot(aliMat, beside=TRUE, horiz=T, yaxt="n", col=terrain.colors(10)[c(4:1)])
mtext(side=2, line=2, at=colMeans(x1), text = colnames(aliMat), cex=1.25,las=3)
mtext(side=2, line=4, at=mean(x1), text = "Grau de Repleção", cex=1.25,las=3)
axis(side=2, at=x1, labels=rep(rownames(aliMat),4), cex=0.7,las=2)
mtext("Frequência (Número de indivíduos)", side=1, line=3, cex=1.25)
dev.off()

# Considerações finais
levels(factor(BioAnual23$Mes)) # conferir meses no periodo
nrow(BioAnual23) # numero de exemplares

captura.peso<-tapply(BioAnual23$Peso.total..g., BioAnual23$Genero, sum, na.rm=T)
sort(round(captura.peso/sum(captura.peso)*100,1)) # contribuição na peso total

captura.numero<-tapply(BioAnual23$Peso.total..g., BioAnual23$Genero, length)
sort(round(captura.numero/sum(captura.numero)*100,1)) # contribuição no numero total

barplot(repG)
round(repG/sum(repG)*100,1)
sum(repG[c(2,3)])/sum(repG)

barplot(repF)
round(repF/sum(repF)*100,1)
sum(repF[c(2,3)])/sum(repF)

barplot(repT)
round(repT/sum(repT)*100,1)
sum(repT[c(2,3)])/sum(repT)

barplot(repL)
round(repL/sum(repL)*100,1)
sum(repL[c(2,3)])/sum(repL)

barplot(aliG)
round(aliG/sum(aliG)*100,1)

barplot(aliF)
round(aliF/sum(aliF)*100,1)
barplot(aliT)
round(aliT/sum(aliT)*100,1)
barplot(aliL)
round(aliL/sum(aliL)*100,1)

Preco
min(Preco$Preço, na.rm=T)
max(Preco$Preço, na.rm=T)
